# Name of your Serverless service
service: my-serverless-app

# AWS provider configuration
provider:
  name: aws
  runtime: nodejs14.x
  region: your-aws-region

# Lambda functions
functions:
  # First Lambda function
  hello:
    handler: handler.hello
    events:
      - http:
          path: /
          method: get

  # Second Lambda function
  anotherFunction:
    handler: handler.anotherFunction
    events:
      - http:
          path: /another
          method: get

  # Third Lambda function
  thirdFunction:
    handler: handler.thirdFunction
    events:
      - http:
          path: /third
          method: get

# AWS CloudFormation resources
resources:
  Resources:
    # First DynamoDB table
    FirstDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: your-first-dynamodb-table
        # Add other properties as needed

    # Second DynamoDB table
    SecondDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: your-second-dynamodb-table
        # Add other properties as needed

    # Third DynamoDB table
    ThirdDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: your-third-dynamodb-table
        # Add other properties as needed

    # First S3 bucket
    FirstS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: your-first-s3-bucket
        # Add other properties as needed

    # Second S3 bucket
    SecondS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: your-second-s3-bucket
        # Add other properties as needed

    # API Gateway configuration
    ApiGateway:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: YourApiName
        Description: Your API description

    # API Gateway resource configuration
    ApiGatewayResource:
      Type: "AWS::ApiGateway::Resource"
      Properties:
        RestApiId:
          Fn::Ref: ApiGateway
        ParentId:
          Fn::GetAtt:
            - ApiGateway
            - RootResourceId
        PathPart: your-resource-path

    # API Gateway method configuration
    ApiGatewayMethod:
      Type: "AWS::ApiGateway::Method"
      Properties:
        AuthorizationType: NONE
        HttpMethod: GET
        ResourceId:
          Fn::GetAtt:
            - ApiGatewayResource
            - Id
        RestApiId:
          Fn::Ref: ApiGateway
        Integration:
          IntegrationHttpMethod: POST
          Type: AWS_PROXY
          Uri:
            Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${YourLambdaFunction.Arn}/invocations

    # Lambda function configuration
    LambdaFunction1:
      Type: AWS::Lambda::Function
      Properties:
        Handler: handler.function1
        Role: your-lambda-execution-role-arn
        FunctionName: your-function1-name
        Runtime: nodejs14.x
        # ... other properties for function1

    LambdaFunction2:
      Type: AWS::Lambda::Function
      Properties:
        Handler: handler.function2
        Role: your-lambda-execution-role-arn
        FunctionName: your-function2-name
        Runtime: nodejs14.x
        # ... other properties for function2

    LambdaFunction3:
      Type: AWS::Lambda::Function
      Properties:
        Handler: handler.function3
        Role: your-lambda-execution-role-arn
        FunctionName: your-function3-name
        Runtime: nodejs14.x
        # ... other properties for function3